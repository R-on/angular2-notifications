import { EventEmitter, Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { DEFAULT_ICONS } from '../consts/default-icons.const';
import { NotificationType } from '../enums/notification-type.enum';
import * as i0 from "@angular/core";
export class NotificationsService {
    globalOptions;
    constructor(globalOptions) {
        this.globalOptions = globalOptions;
    }
    emitter = new Subject();
    icons = DEFAULT_ICONS;
    set(notification, to) {
        notification.id = notification.override && notification.override.id ?
            notification.override.id :
            Math.random().toString(36).substring(3);
        notification.click = new EventEmitter();
        notification.clickIcon = new EventEmitter();
        notification.timeoutEnd = new EventEmitter();
        this.emitter.next({ command: 'set', notification, add: to });
        return notification;
    }
    success(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Success, icon: this.icons.success, override, context }, true);
    }
    error(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Error, icon: this.icons.error, override, context }, true);
    }
    alert(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Alert, icon: this.icons.alert, override, context }, true);
    }
    info(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Info, icon: this.icons.info, override, context }, true);
    }
    warn(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Warn, icon: this.icons.warn, override, context }, true);
    }
    bare(title = '', content = '', override, context) {
        return this.set({ title, content: content || '', type: NotificationType.Bare, icon: 'bare', override, context }, true);
    }
    // With type method
    create(title = '', content = '', type = NotificationType.Success, override, context) {
        return this.set({ title, content, type, icon: this.icons[type], override, context }, true);
    }
    // HTML Notification method
    html(html, type = NotificationType.Success, override, icon = 'bare', context) {
        return this.set({ html, type, icon: this.icons[icon], override, context }, true);
    }
    // Remove all notifications method
    remove(id) {
        if (id) {
            this.emitter.next({ command: 'clean', id });
        }
        else {
            this.emitter.next({ command: 'cleanAll' });
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NotificationsService, deps: [{ token: 'options' }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NotificationsService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NotificationsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: ['options']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmljYXRpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOztBQU1uRSxNQUFNLE9BQU8sb0JBQW9CO0lBRUg7SUFENUIsWUFDNEIsYUFBa0I7UUFBbEIsa0JBQWEsR0FBYixhQUFhLENBQUs7SUFDMUMsQ0FBQztJQUVMLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBcUIsQ0FBQztJQUMzQyxLQUFLLEdBQVUsYUFBYSxDQUFDO0lBRTdCLEdBQUcsQ0FBQyxZQUEwQixFQUFFLEVBQVc7UUFDekMsWUFBWSxDQUFDLEVBQUUsR0FBRyxZQUFZLENBQUMsUUFBUSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxZQUFZLENBQUMsS0FBSyxHQUFHLElBQUksWUFBWSxFQUFNLENBQUM7UUFDNUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksRUFBTSxDQUFDO1FBQ2hELFlBQVksQ0FBQyxVQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU0sQ0FBQztRQUVqRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FB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QUFFLElBQUksRUFBRyxJQUFJLENBQUMsS0FBYSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQsMkJBQTJCO0lBQzNCLElBQUksQ0FBQyxJQUFTLEVBQUUsSUFBSSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFjLEVBQUUsSUFBSSxHQUFHLE1BQU0sRUFBRSxPQUFhO1FBQzNGLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFHLElBQUksQ0FBQyxLQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFRCxrQ0FBa0M7SUFDbEMsTUFBTSxDQUFDLEVBQVc7UUFDaEIsSUFBSSxFQUFFLEVBQUU7WUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7d0dBN0RVLG9CQUFvQixrQkFFckIsU0FBUzs0R0FGUixvQkFBb0I7OzRGQUFwQixvQkFBb0I7a0JBRGhDLFVBQVU7OzBCQUdOLE1BQU07MkJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgREVGQVVMVF9JQ09OUyB9IGZyb20gJy4uL2NvbnN0cy9kZWZhdWx0LWljb25zLmNvbnN0JztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gJy4uL2VudW1zL25vdGlmaWNhdGlvbi10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBJY29ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMvaWNvbnMnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25FdmVudCB9IGZyb20gJy4uL2ludGVyZmFjZXMvbm90aWZpY2F0aW9uLWV2ZW50LnR5cGUnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL25vdGlmaWNhdGlvbi50eXBlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvbnNTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoJ29wdGlvbnMnKSBwdWJsaWMgZ2xvYmFsT3B0aW9uczogYW55XHJcbiAgKSB7IH1cclxuXHJcbiAgZW1pdHRlciA9IG5ldyBTdWJqZWN0PE5vdGlmaWNhdGlvbkV2ZW50PigpO1xyXG4gIGljb25zOiBJY29ucyA9IERFRkFVTFRfSUNPTlM7XHJcblxyXG4gIHNldChub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbiwgdG86IGJvb2xlYW4pOiBOb3RpZmljYXRpb24ge1xyXG4gICAgbm90aWZpY2F0aW9uLmlkID0gbm90aWZpY2F0aW9uLm92ZXJyaWRlICYmIG5vdGlmaWNhdGlvbi5vdmVycmlkZS5pZCA/XHJcbiAgICAgIG5vdGlmaWNhdGlvbi5vdmVycmlkZS5pZCA6XHJcbiAgICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygzKTtcclxuICAgIG5vdGlmaWNhdGlvbi5jbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8e30+KCk7XHJcbiAgICBub3RpZmljYXRpb24uY2xpY2tJY29uID0gbmV3IEV2ZW50RW1pdHRlcjx7fT4oKTtcclxuICAgIG5vdGlmaWNhdGlvbi50aW1lb3V0RW5kID0gbmV3IEV2ZW50RW1pdHRlcjx7fT4oKTtcclxuXHJcbiAgICB0aGlzLmVtaXR0ZXIubmV4dCh7IGNvbW1hbmQ6ICdzZXQnLCBub3RpZmljYXRpb24sIGFkZDogdG8gfSk7XHJcbiAgICByZXR1cm4gbm90aWZpY2F0aW9uO1xyXG4gIH1cclxuXHJcbiAgc3VjY2Vzcyh0aXRsZTogYW55ID0gJycsIGNvbnRlbnQ6IGFueSA9ICcnLCBvdmVycmlkZT86IGFueSwgY29udGV4dD86IGFueSk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXQoeyB0aXRsZSwgY29udGVudDogY29udGVudCB8fCAnJywgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5TdWNjZXNzLCBpY29uOiB0aGlzLmljb25zLnN1Y2Nlc3MsIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgZXJyb3IodGl0bGU6IGFueSA9ICcnLCBjb250ZW50OiBhbnkgPSAnJywgb3ZlcnJpZGU/OiBhbnksIGNvbnRleHQ/OiBhbnkpOiBOb3RpZmljYXRpb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0KHsgdGl0bGUsIGNvbnRlbnQ6IGNvbnRlbnQgfHwgJycsIHR5cGU6IE5vdGlmaWNhdGlvblR5cGUuRXJyb3IsIGljb246IHRoaXMuaWNvbnMuZXJyb3IsIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgYWxlcnQodGl0bGU6IGFueSA9ICcnLCBjb250ZW50OiBhbnkgPSAnJywgb3ZlcnJpZGU/OiBhbnksIGNvbnRleHQ/OiBhbnkpOiBOb3RpZmljYXRpb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0KHsgdGl0bGUsIGNvbnRlbnQ6IGNvbnRlbnQgfHwgJycsIHR5cGU6IE5vdGlmaWNhdGlvblR5cGUuQWxlcnQsIGljb246IHRoaXMuaWNvbnMuYWxlcnQsIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgaW5mbyh0aXRsZTogYW55ID0gJycsIGNvbnRlbnQ6IGFueSA9ICcnLCBvdmVycmlkZT86IGFueSwgY29udGV4dD86IGFueSk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXQoeyB0aXRsZSwgY29udGVudDogY29udGVudCB8fCAnJywgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5JbmZvLCBpY29uOiB0aGlzLmljb25zLmluZm8sIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgd2Fybih0aXRsZTogYW55ID0gJycsIGNvbnRlbnQ6IGFueSA9ICcnLCBvdmVycmlkZT86IGFueSwgY29udGV4dD86IGFueSk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXQoeyB0aXRsZSwgY29udGVudDogY29udGVudCB8fCAnJywgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5XYXJuLCBpY29uOiB0aGlzLmljb25zLndhcm4sIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgYmFyZSh0aXRsZTogYW55ID0gJycsIGNvbnRlbnQ6IGFueSA9ICcnLCBvdmVycmlkZT86IGFueSwgY29udGV4dD86IGFueSk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXQoeyB0aXRsZSwgY29udGVudDogY29udGVudCB8fCAnJywgdHlwZTogTm90aWZpY2F0aW9uVHlwZS5CYXJlLCBpY29uOiAnYmFyZScsIG92ZXJyaWRlLCBjb250ZXh0IH0sIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLy8gV2l0aCB0eXBlIG1ldGhvZFxyXG4gIGNyZWF0ZSh0aXRsZTogYW55ID0gJycsIGNvbnRlbnQ6IGFueSA9ICcnLCB0eXBlID0gTm90aWZpY2F0aW9uVHlwZS5TdWNjZXNzLCBvdmVycmlkZT86IGFueSwgY29udGV4dD86IGFueSk6IE5vdGlmaWNhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXQoeyB0aXRsZSwgY29udGVudCwgdHlwZSwgaWNvbjogKHRoaXMuaWNvbnMgYXMgYW55KVt0eXBlXSwgb3ZlcnJpZGUsIGNvbnRleHQgfSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBIVE1MIE5vdGlmaWNhdGlvbiBtZXRob2RcclxuICBodG1sKGh0bWw6IGFueSwgdHlwZSA9IE5vdGlmaWNhdGlvblR5cGUuU3VjY2Vzcywgb3ZlcnJpZGU/OiBhbnksIGljb24gPSAnYmFyZScsIGNvbnRleHQ/OiBhbnkpOiBOb3RpZmljYXRpb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0KHsgaHRtbCwgdHlwZSwgaWNvbjogKHRoaXMuaWNvbnMgYXMgYW55KVtpY29uXSwgb3ZlcnJpZGUsIGNvbnRleHQgfSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBSZW1vdmUgYWxsIG5vdGlmaWNhdGlvbnMgbWV0aG9kXHJcbiAgcmVtb3ZlKGlkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgdGhpcy5lbWl0dGVyLm5leHQoeyBjb21tYW5kOiAnY2xlYW4nLCBpZCB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZW1pdHRlci5uZXh0KHsgY29tbWFuZDogJ2NsZWFuQWxsJyB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19